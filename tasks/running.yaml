apiVersion: devops.alauda.io/v1alpha1
kind: ClusterPipelineTaskTemplate
metadata:
  name: running
  annotations:
    alauda.io/displayName.zh-CN: 运行时构建
    alauda.io/displayName.en: Running Build
    alauda.io/description.zh-CN: 构建程序
    alauda.io/description.en: Build a project
    alauda.io/readme.zh-CN: 构建程序
    alauda.io/readme.en: Build a project
    alauda.io/version: "0.1.3"
    alauda.io/style.icon: ""
  labels:
    ategory: CI
    source: customer
spec:
  engine: gotpl
  body: |+
    script {
        def repositoryAddr = '{{.ciImageRepository.repositoryPath}}'.replace("http://","").replace("https://","")
        env.IMAGE_REPO = repositoryAddr

        def credentialId = ''
        credentialId = "{{ .ciImageRepository.credentialId }}"
        dir(RELATIVE_DIRECTORY) {
            container('tools'){
                try{
                    if (credentialId != '') {
                      withCredentials([usernamePassword(credentialsId: "${credentialId}", passwordVariable: 'PASSWD', usernameVariable: 'USER')]) {
                        sh "docker login ${IMAGE_REPO} -u ${USER} -p ${PASSWD}"
                        }
                      }
                    }
                catch(err){
                    alaudaDevops.withCluster() {
                          def secretNamespace = "{{ .ciImageRepository.secretNamespace }}"
                          def secretName = "{{ .ciImageRepository.secretName }}"
                          def secret = alaudaDevops.selector( "secret/${secretName}" )
                          alaudaDevops.withProject( "${secretNamespace}" ) {
                              def secretjson = secret.object().data['.dockerconfigjson']
                              def dockerconfigjson = base64Decode("${secretjson}");
                              writeFile file: 'config.json', text: dockerconfigjson
                              sh """
                                set +x
                                mkdir -p ~/.docker
                                mv -f config.json ~/.docker/config.json
                              """
                          }
                      }
                }

                {{- if eq .ciImageRepository.tag "" }}
                  def imageRepoTag = "${IMAGE_REPO}"
                  env.IMAGE_TAG = "latest"
                  def buildimage = "${IMAGE_REPO}:${IMAGE_TAG}"
                {{- else }}
                  def tag = "{{.ciImageRepository.tag}}"
                  def buildimage = "${IMAGE_REPO}:${tag}"
                {{- end }}

                withDockerContainer("${buildimage}") {
                  sh '''
                    cd $WORKSPACE
                    {{ .buildCommand }}
                    '''
                }

                if (credentialId != '') {
                    sh "docker logout ${IMAGE_REPO}"
                }

            }
        }
    }
  arguments:
    - name: "ciImageRepository"
      schema:
        type: alauda.io/dockerimagerepositorypullmix
      required: true
      display:
        type: alauda.io/dockerimagerepositorypullmix
        name:
          zh-CN: "镜像仓库"
          en: Repository
        description:
          zh-CN: "选择或者输入镜像仓库"
          en: ""
    - name: "buildCommand"
      schema:
        type: string
      display:
        type: code
        name:
          zh-CN: "构建命令"
          en: "Build Command"
        description:
          zh-CN: "自定义更详细的构建命令。"
          en: "build command."
      required: false
  exports:
  - name: IMAGE_REPO
    description:
      zh-CN: 镜像仓库
      en: Image Repo
  - name: IMAGE_TAG
    description:
      zh-CN: 镜像标签
      en: Image Tag
  dependencies:
    plugins:
      - name: workflow-basic-steps
        version: "2.9"
      - name: docker-workflow
        version: "1.17"
